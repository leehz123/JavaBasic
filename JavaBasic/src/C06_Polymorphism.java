import myobj.*;
// '*'는 myobj의 모든 것을 가져와서 사용하겠단 뜻. 

/*
# 다형성 Polymorphism
객체는 다양한 형태를 지닐 수 있다.
경찰은 경찰이기도 하고 사람이기도 하다. (업캐스팅)
사람은 사람이지만 경찰이 아닐 수도 있다. (다운캐스팅)

<<인스턴스의 타입 캐스팅 → 인스턴스 = new 자식/부모클래스명(); 맞나????? >>
#업캐스팅
자식타입은 부모 타입의 모든 것을 보유하고 있다. 
자식타입은 언제든지 별다른 문제 없이 부모타입이 될 수 있다. 


#다운캐스팅



 */

public class C06_Polymorphism {
	
	public static void main(String[] args) {
	//* 업캐스팅
		Person p;
		p = new Person(); // 사람(Person())이 사람(p)이 되는 건 당연한 말이고
		p = new Police(); // 경찰은 언제든지 별도의 타입 캐스팅 없이 사람이 될 수 있다. = 자식 타입은 언제든지 별도의 타입 캐스팅 없이 사람이 될 수 있다.
		//Person타입이었던 p인스턴스가 Police 타입으로 다운캐스팅 됨 
		//Police클래스의 인스턴스를 생성해서 부모클래스인 Person의 참조변수에 담기 
	
	//* 다운캐스팅
		Person person;
		Police popo;
		
		//Police popo = new Person();//부모타입은 타입 캐스팅(억지로 타입 변환)을 통해 놀랍게도 자식타입이 될 수 있다.
		//popo = (Police) person; //하지만 ClassCastException 에러가 발생
		
		
		//아래처럼 원래 자식타입이었다가 업캐스팅으로 부모타입(Person)이 된 인스턴스를 다운캐스팅 하는 것은 가능하다.
		//폴리스였다가 펄슨이 된 것을 다시 폴리스로 다운캐스팅 하는 것이 가능하다는 것.
		person = new Police(); //자식 Police인스턴스가 Person의 참조변수 p에 담기면서 업캐스팅
		popo = (Police) person; // Person형으로 업캐스팅 됐던 Police인스턴스가 담긴 person이 다시 Police형 popo에 담기는게 가능. 
		
		person.name = "김체포";
		popo.hi();
		
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~업/다운 캐스팅에 따른 기능 제한~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Person p10 = new Person();
		
		//업캐스팅이 된 자식 인스턴스는 자식 클래스에만 가지고 있는 기능을 사용할 수 없다.  
		Person p11 = new Defender(); //원래 디펜더인 애가 펄슨으로 올라감. 
		//p11.bash(); 불가한 상태 //Defender가 Person이 되면서 bash()와 block()기능을 망각해버림.
		
		//업캐스팅된 상태에서는 부모타입의 자원만 그대로 사용할 수  있다. 
		p11.name = "김철방패";
		p11.age = 33;
		//name과 age는 Person이 가진 기능이라 사용 가능. 
		p11.sayHi(); 
		//업캐스팅이 된 상태에서는 부모타입의 자원만 사용할 수 있는데 그 중에서 오버라이딩된 메서드는 사용할 떄 자식의 것으로 사용된다.★★★★
		//다시 말해 업캐스팅이 된 상태에서도 오버라이딩 된 메서드라면 자식의 것을 사용한다.★★★★★★★★ 
		//부모타입은 골격의 역할을 하고, 자식타입은 내용을 채움. 
		
		
		//업캐스팅된 자식클이 자식클에만 보유한 것을 다시 사용하기 위해서는 다운캐스팅을 다시 해줘야 함. 
		((Defender)p11).bash();
		((Defender)p11).block();
		
		//업캐스팅이 되지 않은 상태에서는 원래의 기능을 사용할 수 있음.
		Defender d1 = new Defender();
		d1.name = "김방패";
		d1.sayHi(); //이 sayHi메서드를 Defender로 오버라이드 해서 제 나이대로 if문의 조건으로 출력하기 위해 Person의 sayHi()가 매개변수를 받지 못하도록 수정함. 
		d1.bash();
		d1.block();
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

		
	}
}
