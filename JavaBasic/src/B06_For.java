
public class B06_For {
	/*
	 # 반복문(Loop) for, while, for-each, do-while(잘 쓰지 않아서 안 배우고 패스) 
	 똑같은 코드를 여러번 반복하고 싶을 때 사용한다. 
	 
	 # for문 
	 	for (초기값;반복조건;증가폭) { 
	 	가운데의 반복 조건이 참인 동안 반복될 코드들; 
	 	} 
	 */
	public static void main(String[] agrs) {
		System.out.println("Hello, world!");
		for (int i = 0; i < 5000; ++i) {
			System.out.println("Hello, world!" + i);
		}
		System.out.println("반복문 종료");

		// 순서는 i=0 > 조건문 확인 > 코드 실행 > ++i해서 i=1됨 > 조건문 확인 > 코드 실행 ..,,
		// 만약 ++i대신 i를 쓰면 i값이 증가하지 않기때문에 무한반복문이 됨.

		/*
		1. 가장 기본적인 형태의 for문 초기값에 0을 주고, 조건에는 반복하고 싶은 횟수를 적는다. 
			증가는 1씩 한다. 원하는 횟수만큼 반복하기 가장 좋은 for문
		 */
		for (int i = 0; i < 50; ++i) {
			System.out.println("원하는 횟수만큼 반복하는 반복문!" + (i + 1));
		}
		// 비개발자들은 0부터 세는 것에 익숙하지 않음
		// 그래서 1부터 세고 싶으면 기본 형태는 유지하되 밑에서 i+1로 해주면 됨.
		// i=1; i<=50이면 연산을 < , = 두 번 하게 됨. 그래서 프로그램이 느려지기도 함 웬만하면 안 쓰는 걸로 하는데
		// 의미가 흐려지면 굳이 숫자를 바꿔가면서까지 <를 고집할 필요도 없음. 그런 정도~

		/*
		2. 초기값과 증가값과 조건을 자유롭게 설정한 for문 
		초기값, 증가값, 조건을 자유롭게 변경하며 용도에 맞게 사용할 수 있다 
		하지만 더 나아가서 초기값, 증가값, 조건을 꼭 넣지 않아도 됨. 조건을 넣지 않으면 무한반복을 하게 된다. 
		 */
		for (;;) {
			System.out.println("Hi!");
		}

		for (int i = 100; i > 0; i -= 5) {
			System.out.println("Hi!" + i);
		}

		for (byte b = 0;; --b) {
			System.out.println("Hi!");
		} // -128에서 오버플로 돼서 +1이 되고 .. 반복

	}
}
